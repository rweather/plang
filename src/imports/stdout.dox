/*
 * plang logic programming language
 * Copyright (C) 2011  Southern Storm Software, Pty Ltd.
 *
 * The plang package is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * The plang package is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the libcompiler library.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

/**
\addtogroup class_stdout

The \c stdout and \c stderr classes provide I/O stream
implementations that write to the process's standard output
and standard error streams.  The two classes implement the
\ref class_iostream "iostream" API, and can be used as follows:

\code
:- import(stdout).
:- import(stderr).

main(Args)
{
    new stdout(Stdout);
    Stdout.writeln("Hello World!");

    new stderr(Stderr);
    Stderr.writeln("Hello Error!");

    Stdout.writeln("Arguments: " + Args);
}
\endcode

The \c stdout and \c stderr classes also provide some static
convenience methods which remove the need to create an object first:

\code
:- import(stdout).
:- import(stderr).

main(Args)
{
    stdout::writeln("Hello World!");
    stderr::writeln("Hello Error!");
    stdout::writeln("Arguments: " + Args);
}
\endcode

\par Parent class
\ref class_iostream "iostream"

\par Class members
See the documentation for \ref class_iostream "iostream".  The
\c stdout and \c stderr streams are write-only.

\par Static class members
\ref stdout_flush "flush()",
\ref stdout_write "write()",
\ref stdout_writeln "writeln()",
\ref stdout_writeTerm "writeTerm()"

<hr>
\anchor stdout_flush
<b>stdout::flush</b>()
<br>
<b>stderr::flush</b>()

\par Description
Flushes all data that has been written so far to standard output
(or standard error).

\par Examples
\code
stdout::write("| ?- ");
stdout::flush();
stdin::readTerm(Term);
\endcode

\par See Also
\ref stdout_write "write()",
\ref iostream_flush "iostream::flush()"

<hr>
\anchor stdout_write
<b>stdout::write</b>(\em Term)
<br>
<b>stderr::write</b>(\em Term)

\par Description
If \em Term is a string, then write it directly to standard output
(or standard error) without quoting.
\par
If \em Term has the form (\em A + \em B), then write \em A and \em B
to the output without the plus sign.  This rule is applied recursively
for writing terms such as (\em A + \em B + \em C + ...).
\par
If \em Term is not a string or of the form (\em A + \em B),
then write it using the same representation and quoting rules as
\ref stdout_writeTerm "writeTerm()".

\par Examples
\code
Answer is 2 + 2;
stdout::write("The answer is: " + Answer);
stdout::writeln();

The answer is: 4
\endcode

\par See Also
\ref stdout_flush "flush()",
\ref stdout_writeln "writeln()",
\ref stdout_writeTerm "writeTerm()",
\ref iostream_write "iostream::write()"

<hr>
\anchor stdout_writeln
<b>stdout::writeln</b>(\em Term)
<br>
<b>stdout::writeln</b>()
<br>
<b>stderr::writeln</b>(\em Term)
<br>
<b>stderr::writeln</b>()

\par Description
If \em Term is a string, then write it directly to standard output
(or standard error) without quoting.
\par
If \em Term has the form (\em A + \em B), then write \em A and \em B
to the output without the plus sign.  This rule is applied recursively
for writing terms such as (\em A + \em B + \em C + ...).
\par
If \em Term is not a string or of the form (\em A + \em B),
then write it using the same representation and quoting rules as
\ref stdout_writeTerm "writeTerm()".
\par
A newline is written after \em Term.  If \em Term is omitted,
then only a newline is written.

\par Examples
\code
Answer is 2 + 2;
stdout::writeln("The answer is: " + Answer);

The answer is: 4
\endcode

\par See Also
\ref stdout_write "write()",
\ref stdout_writeTerm "writeTerm()",
\ref iostream_writeln "iostream::writeln()"

<hr>
\anchor stdout_writeTerm
<b>stdout::writeTerm</b>(\em Term)
<br>
<b>stdout::writeTerm</b>(\em Term, \em Vars)
<br>
<b>stderr::writeTerm</b>(\em Term)
<br>
<b>stderr::writeTerm</b>(\em Term, \em Vars)

\par Description
Write \em Term to standard output (or standard error) in a form that
is compatible with the Plang source parser for
\ref syntax_terms "terms".  The \em Term is not terminated
with a "." or end of line marker.
\par
If \em Vars is present, then it must be a list of
\em Name = \em Var declarations.  If \em Var is encountered as
an unbound variable in \em Term, then it will be written to
\em Stream as \em Name.  Variables not listed in \em Vars will
be written as "_N", where "N" is the variable's pointer value.
If \em Vars is not present, then all unbound variables are
written as "_N".  \em Name must be an atom or string.

\par Errors

\li <tt>instantiation_error</tt> - \em Vars is a variable.
\li <tt>type_error(variable_names, \em Vars)</tt> - \em Vars is
    not a valid list of variable names.

\par Examples
\code
stdout::writeTerm(A - B * 1.5 + pi / 2);
    produces: _1f95460 - _1f95420 * 1.5 + pi / 2

stdout::writeTerm(A - B * 1.5 + pi / 2, ["A" = A, "B" = B]);
    produces: A - B * 1.5 + pi / 2
\endcode

\par See Also
\ref stdout_write "write()",
\ref stdout_writeln "writeln()",
\ref iostream_writeTerm "iostream::writeTerm()"

*/
