/*
 * plang logic programming language
 * Copyright (C) 2011  Southern Storm Software, Pty Ltd.
 *
 * The plang package is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * The plang package is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the libcompiler library.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

/**
\file mainpage.dox
\mainpage

Plang (pronounced "P lang") is an experimental logic programming
language, which borrows the backtracking search of
<a href="http://en.wikipedia.org/wiki/Prolog">Prolog</a>,
but with a completely different C-style syntax on top.
The aim is to explore alternatives to traditional languages
that can help make logic programming more attractive for
practical programming tasks.

Plang includes a number of novel features compared to other
logic programming languages:

\li Uses conventional syntax to perform conventional tasks; such as
    \c if, \c for, and \c while statements.
\li Modern type concepts such as strings and objects which are
    first-class members of the syntax and semantics of unification.
\li Context-free BNF grammar for the core language.
\li Bootstraps from C - no need for a pre-existing third party
    Prolog system to "compile the compiler".

The following pages describe the various aspects of the Plang system:

\li \ref hello_world "Hello World" example in Plang
\li \ref syntax "Language syntax"
\li \ref predicates "Builtin predicates"
\li \ref modules "Modules and classes"
\li \ref plang_manpage "Manual page for the plang command"

The \ref issues_with_prolog "Issues With Prolog" page discusses a
number of issues with traditional Prolog implementations that have
motivated the design of Plang.

*/
