/*
 * plang logic programming language
 * Copyright (C) 2011  Southern Storm Software, Pty Ltd.
 *
 * The plang package is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * The plang package is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the libcompiler library.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

/**
\file execution-model.dox
\page execution_model Plang execution model

\section execution_model_goals Goal exectution

Plang uses a continuation-based model for implementing
p_context_execute_goal().  The mathematical foundations we
adopted can be found in section 2 of the following paper:

\par
E. Jahier, M. Ducasse, O. Ridoux,
<a href="ftp://ftp.cs.man.ac.uk/pub/TR/UMCS-00-6-1-jahier.ps.Z">"Specifying Prolog Trace Models with a Continuation Semantics"</a>,
LOPSTR 2000, Tenth International Workshop on Logic-based Synthesis
and Transformation, 2000.

Mathematically, a goal is a function that operates on three
continuations: success, fail, and cut-fail.  Evaluating the goal
produces a new set of success, fail, and cut-fail continuations.
In Plang, goals are represented as nodes in a graph, with the
success and cut-fail continuations represented as outgoing links
to other nodes.  The fail continuation is a pointer to a node that
is stored in the execution state with the pointer to the current node.

The execution state has two node pointers: the current node to
execute, and the "fail point" node.  A goal node operates on
this state and outputs two new values for the current node and
"fail point".

Some examples of goal execution:

- If the goal is atomic and deterministic (succeeds or fails but
does not backtrack internally):
    - If the goal succeeds, then the current node is set to "success",
      and the "fail point" is left unchanged.
    - If the goal fails, then a back-track occurs (see below).
- If the goal is (A , B), then new nodes are created for A and B.
  The "cut fail point" for the new nodes are set to the "cut fail
  point" of (A, B).  The "success" link on the A node is set to
  point at the B node, and the "success" link on the B node is
  set to the "success" link of (A, B).  The current node is
  replaced with the A node and the "fail point" is left unchanged.
- If the goal is !, then the "fail point" is set to the
  "cut fail point" of the node, and then the current node is set
  to "success".
- If the goal is (A || B), then two new nodes are created for A and
  B that have the same "success" link as (A || B).  The current node is
  replaced with the A node.  Both A and B's "cut fail point" links
  are set to the current "fail point".  The "fail point" is set to B.
- Alternative clauses for a predicate are handled in a similar
  fashion to (A || B), with the B node searching for a new clause
  amongst the remaining clauses.

Upon back-tracking, the current node is set to the "fail point",
and the "fail point" is set to the "cut fail point" of the new
current node.  If "fail point" is NULL when back-tracking is
requested, then a top-level goal failure has occurred.

Top-level goals are prepared for execution by creating a new
current node for the goal G.  The "success" and "cut fail point"
links on the goal node are set to NULL.  The "fail point" is
also set to NULL.

A top-level goal succeeds once the current node becomes NULL
(because a "success" link was encountered that was NULL).
The top-level goal is re-executed by setting the current node
to "fail point", and "fail point" to the "cut fail point" of the
new current node.  All solutions are exhausted once "fail point"
becomes NULL on a top-level goal.

\section execution_model_exceptions Exceptions

The paper above does not describe the handling of
\ref catch_3 "catch/3" and \ref throw_1 "throw/1" in a Prolog
environment.  We extend the mechanism by adding a "catch point"
continuation link to the execution state.  When a catch/3 goal
is executed, the "catch point" link is set to point at the
catch/3 goal, with the previous "catch point" saved in the
new catch point node.

When a throw/1 is executed, a backtrack is performed
to the "cut fail point" of the catch node.  Execution proceeds
from the catch point with the recovery goal if the catch term
matches.  If the catch term does not match, the process repeats
to find the next-outer "catch point" node.  If the "catch point"
is NULL, then the top-level goal has finished with a thrown error.

The current "catch point" is saved in fail nodes so that it can
be restored upon backtracking.  The "catch point" also needs
to be restored when the body of the catch/3 succeeds.  We handle
this by inserting a special <tt>$$pop_catch</tt> goal as the
success continuation for the body goal.

\section execution_model_indexing Clause indexing

The standard semantics for predicate execution is to try each
clause in turn until one succeeds.  Upon backtracking, the next
succeeding clause is chosen, until there are no more clauses.
This can be very inefficient if there are lots of clauses
associated with a predicate.  For example, evaluating <tt>X == Y</tt>
with the following predicate will involve trying a lot of
irrelevant clauses first:

\code
eval(A + B, Result)  { ... }    // clause 1
eval(A - B, Result)  { ... }    // clause 2
eval(A * B, Result)  { ... }    // clause 3
eval(A / B, Result)  { ... }    // clause 4
eval(-A, Result)     { ... }    // clause 5
eval(A && B, Result) { ... }    // clause 6
eval(A || B, Result) { ... }    // clause 7
eval(!A, Result)     { ... }    // clause 8
eval(A == B, Result) { ... }    // clause 9
...
eval(A, Result)      { ... }    // clause N
\endcode

The usual solution to this performance problem is \em indexing.
One of the arguments is used to create an index that maps
an incoming value to a list of clauses that are most likely to
match that kind of value.  In the case of <b>(==)/2</b>,
the index will list clauses 9 and N (a variable matches
any incoming value).  Now only those two clauses need to be tried
when we evaluate <tt>X == Y</tt>; we can safely assume that all
other clauses will fail without trying them explicitly.

Plang indexes predicates with more than four clauses.  When the
fifth clause is added, Plang inspects the current clauses to
determine the best argument for indexing.  The best argument is
that which changes the most from clause to clause; usually
the first, but could be the second for class member predicates
(the first argument to class member predicates is the
\c Self variable).

After the index argument has been chosen all of the clauses are
inserted into a red-black tree.  The tree maps the top-level
functor, atom, string, or number in the index argument to a list
of clauses that matches that top-level type.  Clauses without a
top-level type (usually those that have a variable in the
index argument) are added to a separate list.

When a predicate is called, the top-level type of the incoming
argument value is used to look up the relevant clause list
in the red-black tree.  This list is merged with the separate
variable clause list to produce the list of clauses to be
tried in order.  If the incoming argument value is a variable,
then all clauses in the predicate are tried in order.

*/
