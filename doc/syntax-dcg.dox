/*
 * plang logic programming language
 * Copyright (C) 2011  Southern Storm Software, Pty Ltd.
 *
 * The plang package is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * The plang package is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with the libcompiler library.  If not,
 * see <http://www.gnu.org/licenses/>.
 */

/**
\defgroup syntax_dcg Language syntax - Definite clause grammars

\section dcg_intro Introduction

Definite clause grammars (DCG's) are used to describe parser
frameworks for formal or natural languages.  The following example
adapted from <a href="http://en.wikipedia.org/wiki/Definite_clause_grammar">Wikipedia</a>
can parse a subset of English sentences:

\code
sentence --> noun_phrase, verb_phrase.
noun_phrase --> det, noun.
verb_phrase --> verb, noun_phrase.
det --> "the".
det --> "a".
noun --> "cat".
noun --> "bat".
verb --> "eats".
\endcode

The first rule can be read as "a sentence is a noun phrase
followed by a verb phrase".  DCG rules are translated into ordinary
predicates by the Plang parser.  The predicates take two arguments
for the front and end of a "difference list":

\code
sentence(L1, L3) { noun_phrase(L1, L2); verb_phrase(L2, L3); }
noun_phrase(L1, L3) { det(L1, L2); noun(L2, L3); }
verb_phrase(L1, L3) { verb(L1, L2); noun_phrase(L2, L3); }
det(["the"|L], L).
det(["a"|L], L).
noun(["cat"|L], L).
noun(["bat"|L], L).
verb(["eats"|L], L).
\endcode

Once the rules have been compiled, the program can be queried
for valid sentences:

\code
sentence(["the", "cat", "eats", "a", "bat"], [])            succeeds
sentence(["the", "cat", "killed", "a", "bat"], [])          fails
\endcode

The second sentence fails because "killed" is not listed as a
valid verb.

\section dcg_wordnet DCG's and WordNet

The \ref module_words "words" module provides access to the
<a href="http://wordnet.princeton.edu/">WordNet</a> lexical
database from Princeton University.  The database contains
huge amounts of information about English words, particularly
their part of speech (noun, verb, adverb, or adjective).
This information can be very useful when building Natural
Language Processing systems in Plang.  The example above can
be re-expressed as follows:

\code
:- import(words).
sentence --> noun_phrase, verb_phrase.
noun_phrase --> det, words::noun.
verb_phrase --> words::verb, noun_phrase.
det --> "the".
det --> "a".
\endcode

Now it is no longer necessary to explicitly list every noun and
verb in the English language to parse useful sentences:

\code
sentence(["the", "cat", "eats", "a", "bat"], [])            succeeds
sentence(["the", "cat", "killed", "a", "bat"], [])          succeeds
sentence(["the", "car", "killed", "a", "pedestrian"], [])   succeeds
\endcode

See the documentation for the \ref module_words "words" module
for more information on using WordNet with Plang.

\section dcg_parse_trees Building parse trees

Usually an application wants to do more with a sentence than
just check if it is valid.  The applications wants to also
extract a parse tree that describes the major features of
the sentence to perform further processing.  DCG rules can
be augmented with parameters to build such a parse tree:

\code
:- import(words).
sentence(s(NP, VP)) --> noun_phrase(NP), verb_phrase(VP).
noun_phrase(np(D, N)) --> det(D), words::noun(N).
verb_phrase(vp(V, NP)) --> words::verb(V), noun_phrase(NP).
det(d("the")) --> "the".
det(d("a")) --> "a".
\endcode

We can now generate parse trees with the augmented predicates:

\code
sentence(Tree, ["the", "cat", "eats", "a", "bat"], [])

Tree = s(np(d("the"), n("cat")), vp("eats", np(d("a"), n("bat"))))
\endcode

\section dcg_rules DCG rule types

The most common DCG rules express how to convert a head production
into a body made up of the concatenation of other productions:

\code
verb_phrase --> words::verb, noun_phrase.
\endcode

Multiple rules for the same head can be specified to provide
alternatives:

\code
verb_phrase --> words::verb, noun_phrase.
verb_phrase --> words::verb, pronoun(object).
\endcode

Alternatives can also be specified using the <b>(||)/2</b> operator:

\code
verb_phrase --> words::verb, noun_phrase || words::verb, pronoun(object).
\endcode

Alternatives can also appear in the body of a rule when surrounded
by parentheses:

\code
verb_phrase --> words::verb, (noun_phrase || pronoun(object)).
\endcode

Sometimes a rule is only valid if the following text does not
have a certain form.  This can be expressed using the
<b>(!)/1</b> operator.  The following rule can be read as
"a foo is a bar, but only if the bar is not followed by a baz":

\code
foo --> bar, !baz.
\endcode

Rule commitment can be expressed using the cut, <b>(!)/0</b>,
operator.  In the following example, if b is followed by c,
then the DCG rule set will commit to using the first rule
and try to match against d.  If the text after c does not
match d, then the parse fails rather than retry with e
instead of c.

\code
a --> b, c, !, d.
a --> b, e.
\endcode

Literals strings or atoms for matching are expressed as lists:

\code
noun --> ["cat"].
noun --> ["bat"].
noun --> ["bobby", "fischer"].
noun --> [dog].
\endcode

As a short-hand, it is possible to drop the list brackets if
the literal is a string (but not an atom):

\code
noun --> "cat".
noun --> "bat".
noun --> "bobby", "fischer".
noun --> dog.   // expands to the dog rule, not the word "dog".
\endcode

The empty list can be used to match nothing, which is useful for
optional rules:

\code
optional_foo --> foo.
optional_foo --> [].
\endcode

Sometimes a parse rule cannot be expressed directly in DCG
syntax.  For example, recognizing an integer value - enumerating
all of the integers in list literals is impractical.  This case
can be handled by embedding a statement into the rule to perform
additional checks:

\code
expression --> integer_value.
expression --> expression, "+", integer_value.

integer_value --> [X], { integer(X); }.
\endcode

Another method is to use a custom predicate of arity 2
instead of the rule:

\code
expression --> integer_value.
expression --> expression, "+", integer_value.

integer_value([X|Tail], Tail)
{
    integer(X);
}
\endcode

This is essentially what the \ref module_words "words" module
does for recognizing nouns, verbs, adjectives, and adverbs
from WordNet.  The module provides custom predicates that
look and act like DCG rules.

\section dcg_formal Formal syntax of DCG rules

\code
dcg_rule --> dcg_head, "-->", dcg_body, ".".

dcg_head --> atom.
dcg_head --> atom, "(", arguments, ")".
dcg_head --> atom, "(", ")".

dcg_body --> dcg_term.
dcg_body --> dcg_body, "||", dcg_term.

dcg_term --> dcg_neg.
dcg_term --> dcg_term, ",", dcg_neg.

dcg_neg  --> dcg_prim.
dcg_neg  --> "!", dcg_prim.

dcg_prim --> dcg_head.
dcg_prim --> compound_statement.
dcg_prim --> "[", "]".
dcg_prim --> "[", arguments, "]".
dcg_prim --> string.
dcg_prim --> "(", dcg_body, ")".
dcg_prim --> "!".
\endcode

*/
